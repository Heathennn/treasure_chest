拉取分支+映射关系
git checkout -b 本地分支名x origin/远程分支名x  拉取并创建分支并直接切换到该分支并建立关联关系
git remote show origin 查看映射关系
git branch -vv 映射关系+最近一次commit
git remote -v 查看当前对应的远程仓库的Git地址
git fetch origin 远程分支名x:本地分支名x  拉取并创建分支

查看分支
git branch --set-upstream-to origin/远程分支名  本地分支名

git branch -a 所有分支 本地+远程

git branch -r 远程分支

git branch 本地分支

git add .添加到暂存区

git commit -m" msg " 

git push

回滚add
撤销所有add文件 git reset HEAD .

撤销单个add文件 git reset HEAD -filename

回滚commit
只回退commit的信息，保留修改代码：git reset --soft head

彻底回退到上次commit版本，不保留修改代码：git reset --hard head^

撤销掉所有本地改动代码 :  git checkout . 
本地代码回退到与git远程仓库保持一致  :  git reset --hard 远程分支名


回滚push
git log查看commit的信息

git revert [--hard] 以前commit的id  恢复到某个commitid

先pull后pull问题
git分为两个仓库，一个是本地的，一个是远程的。
git add .和git commit都是针对你的本地仓库。
git add做了什么，你可以简单理解是标记下那些文件要被提交到本地仓库。
git commit就是把你标记的文件提交到本地仓库
git pull是从远程仓库拉代码并merge到你的本地仓库，pull是两个命令的合（fetch和merge）
所以理论上pull在这两个之前之后都没什么问题，但是通常推荐先pull，我的习惯是
pull、add、commit


git pull 报错时
git stash 现在你想切换分支，但是你还不想提交你正在进行中的工作；所以你储藏这些变更。为了往堆栈推送一个新的储藏，只要运行 git stash：
这时，你可以方便地切换到其他分支工作；你的变更都保存在栈上。要查看现有的储藏，你可以使用 git stash list：
git stash apply。如果你想应用更早的储藏，你可以通过名字指定它，像这样：git stash apply stash@{2}。如果你不指明，Git 默认使用最近的储藏并尝试应用它：
git pull
git stash pop 来重新应用储藏，同时立刻将其从堆栈中移走

合并分支
1、进入要合并的分支（如开发分支合并到master，则进入master目录）
git checkout master
git pull

2、查看所有分支是否都pull下来了
git branch -a

3、使用merge合并开发分支
git merge 分支名

4、查看合并之后的状态
git status

5、有冲突的话，通过IDE解决冲突；

6、解决冲突之后，将冲突文件提交暂存区
git add 冲突文件

7、提交merge之后的结果
git commit

如果不是使用git commit -m "备注" ，那么git会自动将合并的结果作为备注，提交本地仓库；

8、本地仓库代码提交远程仓库
git push